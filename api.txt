from flask import Flask, request, jsonify
import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np
import io
from PIL import Image

app = Flask(__name__)

# Load the trained model
model = tf.keras.models.load_model('path/to/your/saved/model.h5')

# Load class names
data_cat = ['class1', 'class2', 'class3']  # Replace with your actual class names

@app.route('/predict', methods=['POST'])
def predict():
    if 'image' not in request.files:
        return jsonify({'error': 'No image file provided'}), 400
    
    file = request.files['image']
    
    # Read and preprocess the image
    img = Image.open(io.BytesIO(file.read()))
    img = img.resize((180, 180))  # Resize to match your model's input size
    img_array = img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = img_array / 255.0  # Normalize
    
    # Make prediction
    predictions = model.predict(img_array)
    predicted_class = data_cat[np.argmax(predictions[0])]
    confidence = float(np.max(predictions[0]))
    
    return jsonify({
        'predicted_class': predicted_class,
        'confidence': confidence
    })

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)